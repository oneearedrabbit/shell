FROM python:3.9-slim-buster as builder
RUN apt-get -y update \
    && apt-get install -y \
        bison=2:3.3.* \
        flex=2.6.* \
        g++=4:8.3.* \
        gcc=4:8.3.* \
        git=1:2.20.* \
        libprotobuf-dev=3.6.* \
        libnl-route-3-dev=3.4.* \
        make=4.2.* \
        pkg-config=0.29-6 \
        protobuf-compiler=3.6.*
RUN git clone \
    -b '2.9' \
    --single-branch \
    --depth 1 \
    https://github.com/google/nsjail.git /nsjail
WORKDIR /nsjail
RUN make

# ------------------------------------------------------------------------------
FROM python:3.9-slim-buster as base

# Everything will be a user install to allow sandbox's dependencies to be kept
# separate from the packages exposed during eval.
ENV PATH=/root/.local/bin:$PATH \
    PIP_NO_CACHE_DIR=false \
    PIP_USER=1 \
    PIPENV_DONT_USE_PYENV=1 \
    PIPENV_HIDE_EMOJIS=1 \
    PIPENV_NOSPIN=1

RUN apt-get -y update \
    && apt-get install -y \
        gcc=4:8.3.* \
        libnl-route-3-200=3.4.* \
        libprotobuf17=3.6.* \
        supervisor \
    && rm -rf /var/lib/apt/lists/*
RUN pip install pipenv==2020.11.15

COPY --from=builder /nsjail/nsjail /usr/sbin/
RUN chmod +x /usr/sbin/nsjail

ADD diggy-sandbox/docker/supervisord.conf /etc/
RUN mkdir -p /etc/supervisor/conf.d

# ------------------------------------------------------------------------------
FROM base as venv

COPY diggy-sandbox/Pipfile diggy-sandbox/Pipfile.lock /sandbox/
WORKDIR /sandbox

# Pipenv installs to the default user site since PIP_USER is set.
RUN pipenv install --deploy --system


# ------------------------------------------------------------------------------
FROM venv as sandbox

# Install all additional dependencies here
RUN apt-get -y update \
    && apt-get install -y \
        curl \
        gnupg2 \
        procps

# 1. Python

# TODO: Extract this to a post-install script, all additional packages
# must be living outside of the Dockerfile. e.g. docker exec -it
# <container> -v $(pwd)/post-install.sh:/post-install.sh
# /post-install.sh
RUN PYTHONUSERBASE=/opt/python/diggy pip install matplotlib \
  numpy

# 2. Ruby
RUN apt-get install -y \
        ruby ruby-dev

# 3. C/C++
RUN apt-get install -y \
        clang

# Clean up
RUN rm -rf /var/lib/apt/lists/*


# ------------------------------------------------------------------------------
FROM sandbox

WORKDIR /sandbox
COPY diggy-sandbox /sandbox
ADD diggy-sandbox/docker/web.conf /etc/supervisor/conf.d/

# Activate virtual envs like rvm
SHELL ["/bin/bash", "--login", "-c"]

ENTRYPOINT ["supervisord", "--nodaemon", "--configuration", "/etc/supervisord.conf"]
